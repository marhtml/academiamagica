import academia.*
import magos.*
describe "academia" {

    method configAcademia() {
        [balthazar, iris, selene, aldric].forEach {
            mago => academia.unirse(mago)
        }
       
    }

    test "La academia intenta unir a Aldric, pero no puede debido a su bajo poder, por lo que queda en la lista de candidatos" {
        //arrange

        //act
        academia.unirse(aldric)

        //assert
        assert.that(academia.candidatos().contains(aldric))
        assert.that(academia.equipo().isEmpty())
    }

    test " Aldric intenta unirse a la academia, y como no lo logra, cambia al Bastón de Fuego y entrena de forma individual. Luego, la academia vuelve a evaluar candidatos. Ahora Aldric entra al equipo." {
        //arrage
        academia.unirse(aldric)
        aldric.baston(bastoFuego)
        aldric.entrenar()

        //act
        academia.volverAEvaluar()

        //Assert
        assert.that(academia.equipo().contains(aldric))
        assert.that(academia.candidatos().isEmpty())

    }

    test "Selene alterna Luz Lunar y entrena, lo que eleva su poder a 120. Si la academia la evaluara ahora, no podría unirse al equipo porque su energía sigue siendo 35" {
        //arrage
        selene.alternar()
        selene.entrenar()

        //act // assert
        assert.notThat(academia.evaluar(selene))
        assert.equals(35, selene.energia())
        assert.equals(120, selene.poder())
    }

    test "Selene solo entrena sin alternar la Luz Lunar y es evaluada por la academia. Esta vez podría unirse al equipo, ya que su energía sería de 60." {
        //arrage
        selene.entrenar()

        //act
        academia.unirse(selene) 
        
        // assert
        assert.that(academia.equipo().contains(selene))
        assert.equals(60, selene.energia())
        assert.equals(60, selene.poder())
    }

    test "Balthazar puede ser reclutado al inicio" {
        
        // act
        academia.unirse(balthazar) 

        // assert
        assert.that(academia.equipo().contains(balthazar))
        
    }

    test "Balthazar después de entrenar dos veces, su energía mágica aumenta a 65 y su poder baja a 29. En ese momento ya no puede ser reclutado." {
        // arrange
        balthazar.entrenar()
        balthazar.entrenar()
        
        // act
        academia.unirse(balthazar) 

        // assert
        assert.that(academia.candidatos().contains(balthazar))
        assert.equals(29, balthazar.poder())
        assert.equals(65, balthazar.energia())
    }

    test "Iris usa su poder de sanación en el Escudo Mágico de Arcana, mejorando su resistencia y durabilidad a 550 y 700, respectivamente." {
        //act
        iris.usarPoderSanacion()

        //assert
        assert.equals(550, escudo.resistencia())
        assert.equals(700, escudo.durabilidad())
    }

    test "iris entrena y vuelve a usar su sanación, dejando el escudo con 480 puntos de resistencia y 760 de durabilidad." {
        //arrange
        iris.entrenar()

        //act
        iris.usarPoderSanacion()

        //assert
        assert.equals(480, escudo.resistencia())
        assert.equals(780, escudo.durabilidad())
    } 

    test "Reclutar a los 4 magos y comprobar que Balthazar e Iris permanecen en el equipo" {
        self.configAcademia()
        assert.equals([balthazar, iris] , academia.equipo())
        assert.that(academia.candidatos().contains(aldric))
        assert.that(academia.candidatos().contains(selene))
    }

    test "Entrenar a Selene y Balthazar una vez, reclutar a los 4 magos" {
        selene.entrenar()
        balthazar.entrenar()
        self.configAcademia()
        assert.equals([balthazar, iris,selene] , academia.equipo())
        assert.that(academia.candidatos().contains(aldric))
        assert.equals(127, academia.poderTotal())
        assert.equals(5, academia.deltaEnergia())
        assert.that(academia.enCondicionesOptimas())
    }
}